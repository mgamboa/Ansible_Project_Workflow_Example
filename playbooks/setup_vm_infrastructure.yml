---
- name: Set up VM Infrastructure
  hosts: localhost
  gather_facts: no
  vars:
    vm_count: 4  # Recommended minimal setup: 1 webserver, 1 database, 1 load balancer, 1 monitoring
    ip_range_start: 50
    ip_range_end: 60
    vm_roles:
      - webserver
      - database
      - loadbalancer
      - monitoring

  tasks:
    - name: Ensure PyVmomi and PyVim are installed
      ansible.builtin.pip:
        name:
          - PyVmomi
          - PyVim
        state: present
      delegate_to: localhost

    - name: Generate VM names and assign IPs
      set_fact:
        vms: "{{ vms | default([]) + [{'name': item + '-vm-' + 999 | random | string, 'ip': '192.168.2.' + (ip_range_start + idx) | string, 'role': item}] }}"
      loop: "{{ vm_roles }}"
      loop_control:
        index_var: idx
      when: idx < vm_count

    - name: Create virtual machines with static IPs
      community.vmware.vmware_guest:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: no
        datacenter: "{{ datacenter_name }}"
        cluster: "{{ cluster_name }}"
        name: "{{ item.name }}"
        template: "{{ template_name }}"
        folder: "{{ vm_folder }}"
        state: "poweredon"
        networks:
          - name: "{{ vm_network }}"
            ip: "{{ item.ip }}"
            netmask: "{{ ip_netmask }}"
            gateway: "{{ ip_gateway }}"
        customization:
          dns_servers:
            - "{{ dns1 }}"
            - "{{ dns2 }}"
          domain: "{{ domain_name }}"
      delegate_to: localhost
      loop: "{{ vms }}"

    - name: Wait for VMware tools to become available
      community.vmware.vmware_guest_tools_wait:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: no
        name: "{{ item.name }}"
      delegate_to: localhost
      loop: "{{ vms }}"

    - name: Get VM info
      community.vmware.vmware_guest_info:
        hostname: "{{ vcenter_hostname }}"
        username: "{{ vcenter_username }}"
        password: "{{ vcenter_password }}"
        validate_certs: no
        name: "{{ item.name }}"
      delegate_to: localhost
      register: vm_info
      loop: "{{ vms }}"

    - name: Create dynamic inventory dictionary
      set_fact:
        dynamic_inventory:
          all:
            children:
              webserver: {"hosts": {}}
              database: {"hosts": {}}
              loadbalancer: {"hosts": {}}
              monitoring: {"hosts": {}}
      
    - name: Populate dynamic inventory
      set_fact:
        dynamic_inventory: >
          {{ dynamic_inventory | combine({
            item.item.role: {
              "hosts": {
                item.instance.hw_name: {
                  "ansible_host": item.instance.ipv4
                }
              }
            }
          }, recursive=True) }}
      loop: "{{ vm_info.results }}"
      when: 
        - item.instance.ipv4 is defined and item.instance.ipv4 != None and item.instance.ipv4 != ""

    - name: Create JSON inventory file
      copy:
        content: "{{ dynamic_inventory | to_json }}"
        dest: "/tmp/dynamic_inventory.json"

    - name: Update AWX inventory
      uri:
        url: "{{ awx_url }}/api/v2/inventories/{{ awx_inventory_id }}/update_inventory_sources/"
        method: POST
        headers:
          Authorization: "Bearer {{ awx_token }}"
          Content-Type: "application/json"
        body_format: json
        body: 
          source: "file"
          source_path: "/tmp/dynamic_inventory.json"
        status_code: 202
      delegate_to: localhost

- name: Configure new VMs
  hosts: all
  gather_facts: yes
  become: yes

  tasks:
    - name: Ensure hostname is set
      hostname:
        name: "{{ inventory_hostname }}"

    - name: Update /etc/hosts file
      lineinfile:
        path: /etc/hosts
        line: "{{ ansible_host }} {{ inventory_hostname }}.{{ domain_name }} {{ inventory_hostname }}"
        state: present

    - name: Ensure required packages are installed
      yum:
        name:
          - vim
          - wget
          - git
        state: present

    - name: Configure firewall
      firewalld:
        service: ssh
        permanent: yes
        state: enabled

    - name: Ensure SELinux is in enforcing mode
      selinux:
        policy: targeted
        state: enforcing

    - name: Reboot VM to apply changes
      reboot:

- name: Finalize setup
  hosts: localhost
  gather_facts: no

  tasks:
    - name: Display setup summary
      debug:
        msg: 
          - "Infrastructure setup complete."
          - "Created VMs:"
          - "{{ dynamic_inventory | to_nice_yaml }}"
